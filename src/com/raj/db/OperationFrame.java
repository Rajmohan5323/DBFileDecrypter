/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.raj.db;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/**
 *
 * @author ADMIN
 */
public class OperationFrame extends javax.swing.JFrame {

    /**
     * Creates new form OperationFrame
     */
     public String rutaCT;
     public String rutaCT1;
    
    public OperationFrame() {
        initComponents();
         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
         Dimension frameSize = this.getSize();
         int x = (screenSize.width - frameSize.width) / 2;
         int y = (screenSize.height - frameSize.height) / 2;
         this.setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        btnBrowseBackup = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textareaoutput = new javax.swing.JTextArea();
        lblBrowseBackup = new javax.swing.JLabel();
        lblBrowseLocation = new javax.swing.JLabel();
        btnBrowseLocation = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnConvert = new javax.swing.JButton();
        jTextFieldBackup = new javax.swing.JTextField();
        jTextFieldLocation = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnBrowseBackup.setText("Browse");
        btnBrowseBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseBackupActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/raj/icon/Background.png"))); // NOI18N

        textareaoutput.setColumns(20);
        textareaoutput.setRows(5);
        jScrollPane1.setViewportView(textareaoutput);

        lblBrowseBackup.setText("Browse the backup file");

        lblBrowseLocation.setText("Where save to the source file");

        btnBrowseLocation.setText("Browse");
        btnBrowseLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseLocationActionPerformed(evt);
            }
        });

        btnConvert.setText("Convert");
        btnConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertActionPerformed(evt);
            }
        });

        jTextFieldBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBackupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnConvert))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextFieldLocation, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBrowseLocation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBrowseLocation)))
                        .addGap(0, 1, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblBrowseBackup, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                            .addComponent(jTextFieldBackup, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBrowseBackup)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(lblBrowseBackup, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBrowseBackup)
                    .addComponent(jTextFieldBackup, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(lblBrowseLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jTextFieldLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBrowseLocation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnConvert)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseBackupActionPerformed

        this.textareaoutput.setText("");
        JFileChooser fileChooserRestore = new JFileChooser();
        fileChooserRestore.showOpenDialog(this.mainPanel);
        File fileLocation = fileChooserRestore.getSelectedFile();
        if (fileLocation != null)
        {
        this.jTextFieldBackup.setText(fileLocation.getAbsolutePath().toString());
       }
    }//GEN-LAST:event_btnBrowseBackupActionPerformed

    private void btnBrowseLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseLocationActionPerformed
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File("."));
            chooser.setDialogTitle("select location");
            chooser.setFileSelectionMode(1);

            if (chooser.showOpenDialog(this) == 0) {
            this.rutaCT = chooser.getSelectedFile().toString();
            }
            this.jTextFieldLocation.setText(new StringBuilder().append(this.rutaCT).toString());
    }//GEN-LAST:event_btnBrowseLocationActionPerformed

    private void btnConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertActionPerformed
        try {
            convertFile();
        } catch (IOException ex) {
            Logger.getLogger(OperationFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnConvertActionPerformed

    private void jTextFieldBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBackupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldBackupActionPerformed
    public void convertFile() throws IOException{
        String destination = null;
        PrintStream printStream = new PrintStream(new DisplayMessage(this.textareaoutput));
        System.setOut(printStream);
        System.setErr(printStream);
        this.textareaoutput.setText("");
        String backupFile = this.jTextFieldBackup.getText();
        if (!backupFile.trim().equals("") && !backupFile.trim().equals(null)) {
            File file = new File(backupFile);
            if (file.exists()) {
             
             String backupLocation = this.jTextFieldLocation.getText();
               if (!backupLocation.trim().equals("") && !backupLocation.trim().equals(null)) {
                 //  File file2 = new File(backupLocation);
                      System.out.println("Processing...");
                      SimpleDateFormat sdf = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss_a");
                      String strDateValue = sdf.format(new Date());
                      String newDBextention = strDateValue + ".backup";
                      File directory = new File(backupLocation);
                      String filelocation = directory.getCanonicalPath();
                      String randomfilename = "\\"+ this.methodshuffle();
                      destination = filelocation + randomfilename + newDBextention;
                      this.decrypt(backupFile, destination);
                      System.out.println("Your backup has been successfully stored in : " +destination );
                      JOptionPane.showMessageDialog(this, "Your backup has been successfully stored");
               }
               else{
                this.textareaoutput.setText("");
                JOptionPane.showMessageDialog(this, "Please browse the Location");
        }
                
                
            }
            else {
                JOptionPane.showMessageDialog(this, "Given backup file is not valid");
            }
        }else{
            this.textareaoutput.setText("");
            JOptionPane.showMessageDialog(this, "Please browse the backup file");
        }
        
        
    }
   public String methodshuffle() {
        String var = "AXSNF";
        List<Character> shufflecollection = new ArrayList<Character>();
        char[] arr$;
        char[] c = arr$ = var.toCharArray();
        for (final char x : arr$) {
            shufflecollection.add(x);
        }
        StringBuilder strbuild = new StringBuilder(var.length());
        while (shufflecollection.size() > 0) {
            int randomshuffle = (int)Math.random() * shufflecollection.size();
            strbuild.append(shufflecollection.remove(randomshuffle));
        }
        return strbuild.toString();
    }  
   
    public void decrypt( String source, String destination) {
        FileInputStream fin = null;
        FileOutputStream fout = null;
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss_a");
            fin = new FileInputStream(source);
            fout = new FileOutputStream(destination);
            int i = 0;
            int count = 0;
            while ((i = fin.read()) != -1) {
                if (count < 100) {
                    --i;
                }
                fout.write(i);
                ++count;
            }
            fin.close();
            fout.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }    
    
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OperationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OperationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OperationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OperationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new OperationFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseBackup;
    private javax.swing.JButton btnBrowseLocation;
    private javax.swing.JButton btnConvert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextFieldBackup;
    private javax.swing.JTextField jTextFieldLocation;
    private javax.swing.JLabel lblBrowseBackup;
    private javax.swing.JLabel lblBrowseLocation;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea textareaoutput;
    // End of variables declaration//GEN-END:variables
}
